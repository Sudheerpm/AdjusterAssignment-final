Start Docker Images
run  = docker  -d
stop = docker-compose -f docker-compose.yml -f docker-compose.override.yml down
--
See images
docker images

See running containers
docker ps
--
See application locally
TEST
http://localhost:8000/swagger/index.html
http://localhost:8001/
--
Stop Running Containers
stop = docker-compose -f docker-compose.yml -f docker-compose.override.yml down
-- --
Install the Azure CLI
	https://docs.microsoft.com/en-us/cli/azure/install-azure-cli
	https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli
--
az version

{
  "azure-cli": "2.16.0",
  "azure-cli-core": "2.16.0",
  "azure-cli-telemetry": "1.0.6",
  "extensions": {}
}
--
az login
--
Create a resource group
az group create --name myResourceGroup --location westeurope
--
Create an Azure Container Registry
az acr create --resource-group myResourceGroup --name adjusterassignmentacr --sku Basic
--
Enable Admin Account for ACR Pull
az acr update -n adjusterassignmentacr --admin-enabled true
--
Log in to the container registry
az acr login --name adjusterassignmentacr
Login Succeeded
--
Tag a container image

get the login server address
az acr list --resource-group myResourceGroup --query "[].{acrLoginServer:loginServer}" --output table
adjusterassignmentacr.azurecr.io
--
Tag your images

docker tag adjusterassignmentapi:latest adjusterassignmentacr.azurecr.io/adjusterassignmentapi:v1
docker tag adjustermatchingapi:latest adjusterassignmentacr.azurecr.io/adjustermatchingapi:v1
docker tag adjusterassignmentclient:latest adjusterassignmentacr.azurecr.io/adjusterassignmentclient:v1

Check
docker images
--
Push images to registry

docker push adjusterassignmentacr.azurecr.io/adjusterassignmentapi:v1
docker push adjusterassignmentacr.azurecr.io/adjustermatchingapi:v1
docker push adjusterassignmentacr.azurecr.io/adjusterassignmentclient:v1
--
List images in registry
az acr repository list --name adjusterassignmentacr --output table

Result
adjusterassignmentapi
adjustermatchingapi
adjusterassignmentclient
--
See tags
az acr repository show-tags --name adjusterassignmentacr --repository adjusterassignmentclient --output table

Result
v1
--
Create AKS cluster with attaching ACR
az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --generate-ssh-keys --attach-acr adjusterassignmentacr

--
Install the Kubernetes CLI
az aks install-cli
--
Connect to cluster using kubectl
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

To verify;
kubectl get nodes
kubectl get all
--
Check Kube Config

kubectl config get-contexts
kubectl config current-context
kubectl config use-context gcpcluster-k8s-1
	Switched to context "gcpcluster-k8s-1"
--
Create pull secret for ACR container
------------------------------------------
Login server name --> az acr list --resource-group myResourceGroup --query "[].{acrLoginServer:loginServer}" --output table

Syntax --> kubectl create secret docker-registry registry-credentials —-docker-server=REGISTRY_FQDN —-docker-username=USERNAME 
—-docker-password=PASSWORD —-docker-email=EMAIL

Command --> kubectl create secret docker-registry acr-secret —-docker-server=adjusterassignmentacr.azurecr.io —-docker-username=adjusterassignmentacr —-docker-password=K65F4InAwDzJjanliB8CBAQsa=u8UWOm —-docker-email=sudheepm@in.ibm.com
kubectl get secret

(14) Deploy the API 
-----------------------
kubectl apply -f .\aks


kubectl get all

kubectl get pvc

kubectl get pv

kubectl get svc

kubectl get pods

kubectl get nodes

kodectl describe <podno> ---- trouble shoot.
kubectl describe pod mongo-deployment-69d9bd6885-j78jw

kubectl exec -it mongo-deployment-55dd9c57c8-xtw6g -- /bin/bash

df

kubectl rollout restart deployment mongo-deployment 

kubectl delete -f .\aks

az aks stop --name myAKSCluster --resource-group myResourceGroup

az aks start --name myAKSCluster --resource-group myResourceGroup

(15) When the deployment completes, you can access the Kubernetes Web UI with a local proxy, using an ssh tunnel.

Assign the cluster role binding - kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard

Command to start proxy - az aks browse --resource-group myResourceGroup --name myAKSCluster
Clean All AKS and Azure Resources

az group delete --name myResourceGroup --yes --no-wait
